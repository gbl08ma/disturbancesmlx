// Code generated by github.com/ungerik/pkgreflect DO NOT EDIT.

package discordbot

import "reflect"

var Types = map[string]reflect.Type{
	"Command":         reflect.TypeOf((*Command)(nil)).Elem(),
	"CommandHandler":  reflect.TypeOf((*CommandHandler)(nil)).Elem(),
	"CommandLibrary":  reflect.TypeOf((*CommandLibrary)(nil)).Elem(),
	"CommandReceiver": reflect.TypeOf((*CommandReceiver)(nil)).Elem(),
	"Embed":           reflect.TypeOf((*Embed)(nil)).Elem(),
	"InfoHandler":     reflect.TypeOf((*InfoHandler)(nil)).Elem(),
	"MessageHandler":  reflect.TypeOf((*MessageHandler)(nil)).Elem(),
	"MuteManager":     reflect.TypeOf((*MuteManager)(nil)).Elem(),
	"PosPlayBridge":   reflect.TypeOf((*PosPlayBridge)(nil)).Elem(),
	"PosPlayXPInfo":   reflect.TypeOf((*PosPlayXPInfo)(nil)).Elem(),
	"Privilege":       reflect.TypeOf((*Privilege)(nil)).Elem(),
	"ReactionHandler": reflect.TypeOf((*ReactionHandler)(nil)).Elem(),
	"SQLSystem":       reflect.TypeOf((*SQLSystem)(nil)).Elem(),
	"ScriptSystem":    reflect.TypeOf((*ScriptSystem)(nil)).Elem(),
}

var Functions = map[string]reflect.Value{
	"AnkoPackageConfigurator": reflect.ValueOf(AnkoPackageConfigurator),
	"BuildAnkoOutFunction":    reflect.ValueOf(BuildAnkoOutFunction),
	"ComesFromDM":             reflect.ValueOf(ComesFromDM),
	"CreateInvite":            reflect.ValueOf(CreateInvite),
	"NewCommand":              reflect.ValueOf(NewCommand),
	"NewCommandLibrary":       reflect.ValueOf(NewCommandLibrary),
	"NewEmbed":                reflect.ValueOf(NewEmbed),
	"NewInfoHandler":          reflect.ValueOf(NewInfoHandler),
	"NewMuteManager":          reflect.ValueOf(NewMuteManager),
	"ProjectGuildMember":      reflect.ValueOf(ProjectGuildMember),
	"SendDMtoUser":            reflect.ValueOf(SendDMtoUser),
	"Start":                   reflect.ValueOf(Start),
	"Stop":                    reflect.ValueOf(Stop),
	"User":                    reflect.ValueOf(User),
}

var Variables = map[string]reflect.Value{
	"MessageHandlers":  reflect.ValueOf(&MessageHandlers),
	"ReactionHandlers": reflect.ValueOf(&ReactionHandlers),
	"TheMuteManager":   reflect.ValueOf(&TheMuteManager),
	"ThePosPlayBridge": reflect.ValueOf(&ThePosPlayBridge),
}

var Consts = map[string]reflect.Value{
	"EmbedLimit":            reflect.ValueOf(EmbedLimit),
	"EmbedLimitDescription": reflect.ValueOf(EmbedLimitDescription),
	"EmbedLimitField":       reflect.ValueOf(EmbedLimitField),
	"EmbedLimitFieldName":   reflect.ValueOf(EmbedLimitFieldName),
	"EmbedLimitFieldValue":  reflect.ValueOf(EmbedLimitFieldValue),
	"EmbedLimitFooter":      reflect.ValueOf(EmbedLimitFooter),
	"EmbedLimitTitle":       reflect.ValueOf(EmbedLimitTitle),
	"PrivilegeAdmin":        reflect.ValueOf(PrivilegeAdmin),
	"PrivilegeEveryone":     reflect.ValueOf(PrivilegeEveryone),
	"PrivilegeNobody":       reflect.ValueOf(PrivilegeNobody),
	"PrivilegeRoot":         reflect.ValueOf(PrivilegeRoot),
}
